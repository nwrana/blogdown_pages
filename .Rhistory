trueA <- 5
trueB <- 0
trueSd <- 10
sampleSize <- 31
# create independent x-values
x <- (-(sampleSize-1)/2):((sampleSize- 1)/2)
# create dependent values according to ax + b + N(0,sd)
y <-  trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
plot(x,y,main='Test Data')
plot(x,y,main='Test Data')
x
The next step is to specify the statistical model. we already know the data was created with a linear relationhsip $y=Ax + B + \epsilon$. The error is normally distributed with standard deviation, sd, $mathcal{N}(\mu=0,\,\sigma^{2})$. So lets use the same model and see if we can retrive our original parameter values using MCMC.
The next step is to specify the statistical model. we already know the data was created with a linear relationhsip $y=Ax + B + \epsilon$. The error is normally distributed with standard deviation, sd, $mathcal{N}(\mu=0,\,\sigma^{2})$. So lets use the same model and see if we can retrive our original parameter values using MCMC.
likelihood <- function(param){
a <- param[1]
b <- param[2]
sd <- param[3]
prediction <- a*x + b
singlelikelihoods <- dnorm(y, mean = prediction, sd = sd, log = TRUE)
sumll <- sum(singlelikelihoods)
return(sumll)
}
#Example: plot the likelihood profile of slope a
slopevalues <- function(x) {return(likelihood(c(x, trueB, trueSd)))}
slopelikelihoods <- lapply(seq(3, 7, by=0.05), slopevalues)
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
plot(seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
?seq
?dnorm
y
x
plot(x,y,main='Test Data')
prediciton
prediction
